for (const auto& token : tokens) {
        if (token.spec == Number or token.spec == Variable or
            isConstant(token.spec) or isGenerator(token.spec))
            output.push_back(token);

        else if (isUnaryOp(token.spec))
            output.push_back(token);

        else if (isFunction(token.spec) or token.spec == LeftPars)
            operators.push_back(token);

        else if (isBinaryOp(token.spec)) {
            while (not operators.empty() and
                   getPrecedence(operators.back().spec) >= getPrecedence(token.spec)) {
                output.push_back(operators.back());
                operators.pop_back();
            }
            operators.push_back(token);
        }

        else if (token.spec == Comma) {
            if (operators.empty()) {
                err = SyntaxError(
                    my::format("Mismatched parenthesis or function argument separators (,) (:{})",
                               index),
                    SyntaxError::Type::Parsing);
                return output;
            }
            while (operators.back().spec != LeftPars) {
                output.push_back(operators.back());
                operators.pop_back();
                if (operators.empty()) {
                    err = SyntaxError(
                        my::format("Mismatched parenthesis or function argument separators (,) (:{})",
                                   index),
                        SyntaxError::Type::Parsing);
                    return output;
                }
            }
        }

        else if (token.spec == RightPars) {
            if (operators.empty()) {
                err = SyntaxError(my::format("Mismatched parenthesis (:{})", index),
                                  SyntaxError::Type::Parsing);
                return output;
            }
            while (operators.back().spec != LeftPars) {
                output.push_back(operators.back());
                operators.pop_back();
                if (operators.empty()) {
                    err = SyntaxError(my::format("Mismatched parenthesis (:{})", index),
                                      SyntaxError::Type::Parsing);
                    return output;
                }
            }
            operators.pop_back();
            if (not operators.empty() and isFunction(operators.back().spec)) {
                output.push_back(operators.back());
                operators.pop_back();
            }
        }
        index++;
    }

    while (operators.size()) {
        if (operators.back().spec == LeftPars) {
            err = SyntaxError(my::format("Mismatched parenthesis (:{})", index),
                              SyntaxError::Type::Parsing);
            return output;
        }
        output.push_back(operators.back());
        operators.pop_back();
    }

    return output;